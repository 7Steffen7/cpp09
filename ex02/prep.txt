
Jacobthal sequence: 0, 1, 1, 3, 5, 11, 21, 43, 85, 171 ...

start always with 0,1
to create the following number take the previous number + the number before that * 2;
J(0) = 0;
J(1) = 1;
J(n) = J(n - 1) + 2J(n - 2) for n > 1;
example;
J(4) = J(4 - 1) + 2J(4 - 2) = J(3) + 2J(2) = 3 + (2 * 1) = 5;
J(9) = J(8 - 1) + 2J(8 - 2) = J(7) + 2J(6) = 85 + (43 * 2) = 171;





grouping elements into pairs
sorting each pair by the larger number - recursivly

binary search / insert
container manipulation - insertion

divide and conquer strategy

time space complexity

why ford-johnson? efficiency in comparisons, not very practical in real world applications
